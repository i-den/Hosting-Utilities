const fs = require("fs");
const path = require("path");
const exec = require('child_process').exec;
const {LogMailer} = require("./mailer");

// Define all WordPress sites' wp-content/uploads directories
let dirsToLookForUploadedPHPExecutables = fs.readFileSync(__dirname + path.sep + "all_upload_dirs.txt")
    .toString()
    .split("\n");
    
// Define all legitimate PHP files within the wp-content/uploads directories
let legitimatePHPFiles = fs.readFileSync(__dirname + path.sep + "legitimate_php_files.txt")
    .toString()
    .split("\n");
    
// Find all files that contain <?php in the wp-content/uplods directories for the sites    
let promises = [];
for (let uploadDir of dirsToLookForUploadedPHPExecutables) {
    promises.push(getUploadedPHPFiles(uploadDir));
}
    
// See if there are any new files and send a notification email if any are found    
Promise.all(promises).then(function checkLogsAndEmail(allNewUploadedPHPFiles) {
    let uploadedPHPFiles = [];
    for (let currUploadedPHPFiles of allNewUploadedPHPFiles) {
        // Filter all empty results
        if  (currUploadedPHPFiles.length === 0) continue;
        currUploadedPHPFiles.forEach(f => uploadedPHPFiles.push(f));
    }
    // If there are any uploaded files - send an email
    if (uploadedPHPFiles.length !== 0) {
        LogMailer.setSmtpSubject("Uploaded PHP Files Alert!");
        LogMailer.sendLogs(uploadedPHPFiles.join("\n"));
    } else { // SSH Output
        console.log("Manual run - clean");
    }
});

// Looks for files containing '<?php' within the 
// WordPress installation's wp-content/uploads directory
function getUploadedPHPFiles(dir) {
    return new Promise(function (resolve, reject) {
        var shellCmd = 'grep -rli "<?php"' + ' ' +dir;
        exec(shellCmd, function (err, stdout, stderr) {
            // Filter all legitimate files
            let currUploadedPHPFiles = stdout.toString().trim().split("\n")
                .filter(f => f !== '')
                .filter(f => !legitimatePHPFiles.includes(f));
            resolve(currUploadedPHPFiles);
        });
    });
}