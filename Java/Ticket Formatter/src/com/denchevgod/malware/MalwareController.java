package com.denchevgod.malware;

import com.denchevgod.io.Config;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class MalwareController {

    private File scanFile;

    private List<InfectedUser> infectedUsers;

    private static final String VALID_LINE_REGEX = "(?<infectedFileFullPath>/(?<home>home)/(?<user>.*?)(?<infectedFile>/.*?))(?<separator>:\\s)(?<infectedType>.*)";

    private ArrayList<String> prohibitedBeginsWithWords;
    private ArrayList<String> prohibitedContainsWords;
    private ArrayList<String> prohibitedEndsWithWords;

    public MalwareController(File scanFile) {
        this.scanFile = scanFile;
        infectedUsers = new ArrayList<>();
        prohibitedBeginsWithWords = Config.getInstance().getProhibitedWords("beginsWith");
        prohibitedContainsWords = Config.getInstance().getProhibitedWords("contains");
        prohibitedEndsWithWords = Config.getInstance().getProhibitedWords("endsWith");
    }

    public void createUsers() throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(scanFile));
        Pattern infectedUserPattern = Pattern.compile(VALID_LINE_REGEX);
        String line;
        while ((line = reader.readLine()) != null) {
            Matcher matcher = infectedUserPattern.matcher(line);
            if (matcher.matches() && isValidLine(matcher.group("infectedFile"))) {
                String cPanelUsername = matcher.group("user");
                InfectedUser infectedUser = findInfectedUserByUsername(cPanelUsername);

                if (infectedUser == null) {
                    infectedUser = new InfectedUser(cPanelUsername);
                    infectedUsers.add(infectedUser);
                }

                infectedUser.addMalwareFile(matcher.group("infectedFile"));
            }
        }
        reader.close();
    }

    private boolean isValidLine(String infectedFile) {
        if (prohibitedBeginsWithWords != null) {
            for (String prohibitedBeginsWithWord : prohibitedBeginsWithWords) {
                if (infectedFile.startsWith(prohibitedBeginsWithWord))
                    return false;
            }
        }
        if (prohibitedContainsWords != null) {
            for (String prohibitedContainsWord : prohibitedContainsWords) {
                if (infectedFile.contains(prohibitedContainsWord))
                    return false;
            }
        }
        if (prohibitedEndsWithWords != null) {
            for (String prohibitedEndsWithWord : prohibitedEndsWithWords) {
                if (infectedFile.endsWith(prohibitedEndsWithWord))
                    return false;
            }
        }
        return true;
    }

    private InfectedUser findInfectedUserByUsername(String username) {
        for (InfectedUser infectedUser : infectedUsers) {
            if (infectedUser.getcPanelUsername().equals(username))
                return infectedUser;
        }
        return null;
    }

    public List<InfectedUser> getInfectedUsers() {
        return this.infectedUsers;
    }
}
