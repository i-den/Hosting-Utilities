package com.denchevgod.malware;

import com.denchevgod.io.Config;


import java.io.File;
import java.io.FileNotFoundException;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

import java.util.Set;
import java.util.Map;
import java.util.HashMap;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public final class MalwareManager {

    // Test the RegEx here https://regex101.com/r/vCOUTO/1
    private static final String VALID_LINE_REGEX = "(?<infectedFileFullPath>/(?<home>home)/(?<user>.*?)(?<infectedFile>/.*?))(?<separator>:\\s)(?<infectedType>.*)";

    private MalwareManager() {
        throw new AssertionError("Class MalwareManager should never be instantiated!");
    }

    /**
     *
     * @param scanFile the Malware file listing all scanned files that contain malware
     * @return Set<InfectedUser> a Set of all cPanel Users that have valid Malware Files in their accounts
     */
    public static Set<InfectedUser> getInfectedUsersFromScanFile(File scanFile) {
        // Using a HashMap to quickly see whether a cPanel User has been already created or not
        Map<String, InfectedUser> cPanelUserNameAndInfectedUser = new HashMap<>();

        try (BufferedReader scanFileReader = new BufferedReader(new FileReader(scanFile))) {
            Pattern infectedRegExLinePattern = Pattern.compile(VALID_LINE_REGEX);
            String scanFileLine;

            // Reading each line from the file containing all files with malware
            while ((scanFileLine = scanFileReader.readLine()) != null) {
                // Verify that the line contains valid malware file and use a RegEx to make groups
                Matcher matcher = infectedRegExLinePattern.matcher(scanFileLine);
                if (matcher.matches() && MalwareLineValidator.isValidLine(matcher.group("user"), matcher.group("infectedFile"))) {
                    String cPanelUsername = matcher.group("user");
                    InfectedUser infectedUser = cPanelUserNameAndInfectedUser.get(cPanelUsername);
                    // Using the HashMap to see if the cPanel User already has an InfectedUser object created for
                    if (infectedUser == null) { // if it doesn't - create one and add it in the HashMap
                        infectedUser = new InfectedUser(cPanelUsername);
                        cPanelUserNameAndInfectedUser.put(cPanelUsername, infectedUser);
                    }

                    // Using FullPath results in having a String like "/home/user/public_html/infected.php" added
                    if ((boolean) Config.SETTINGS.getOption("useFullPath")) {
                        infectedUser.addInfectedFile(matcher.group("infectedFileFullPath"));
                    } else { // otherwise it will add just "/public_html/infected.php"
                        infectedUser.addInfectedFile(matcher.group("infectedFile"));
                    }
                }
            }
        } catch (IOException e) {
            System.err.println("IO Operations with the Scan File failed.");
            throw new RuntimeException(e); // This should never be reached as the File object scanFile is sure to be != null
        }

        return new HashSet<>(cPanelUserNameAndInfectedUser.values());
    }

    /**
     * An inner class used solely validate whether lines from
     * the Malware Scan file contain legitimate malware files
     */
    @SuppressWarnings("unchecked")
    private static class MalwareLineValidator {
        static ArrayList<String> prohibitedBeginsWithWords = (ArrayList<String>) Config.SETTINGS.getOption("beginsWith");
        static ArrayList<String> prohibitedContainsWords = (ArrayList<String>) Config.SETTINGS.getOption("contains");
        static ArrayList<String> prohibitedEndsWithWords = (ArrayList<String>) Config.SETTINGS.getOption("endsWith");
        static ArrayList<String> prohibitedcPanelUserNames = (ArrayList<String>) Config.SETTINGS.getOption("prohibitedcPanelUsers");

        static boolean isValidLine(String cPanelUsername, String infectedLine) {
            if (prohibitedcPanelUserNames != null) {
                for (String prohibitedcPanelUserName : prohibitedcPanelUserNames) {
                    if (prohibitedcPanelUserName.equals(cPanelUsername)) {
                        return false;
                    }
                }
            }

            if (prohibitedBeginsWithWords != null) {
                for (String prohibitedBeginsWithWord : prohibitedBeginsWithWords) {
                    if (infectedLine.startsWith(prohibitedBeginsWithWord))
                        return false;
                }
            }

            if (prohibitedContainsWords != null) {
                for (String prohibitedContainsWord : prohibitedContainsWords) {
                    if (infectedLine.contains(prohibitedContainsWord))
                        return false;
                }
            }
            if (prohibitedEndsWithWords != null) {
                for (String prohibitedEndsWithWord : prohibitedEndsWithWords) {
                    if (infectedLine.endsWith(prohibitedEndsWithWord))
                        return false;
                }
            }

            return true;
        }
    }
}
